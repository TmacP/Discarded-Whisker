-- card_factory.script

local card_data = require "Scripts.cards.card_data"
local playerModule = require "Scripts.player"

local rounds = 1
local y = 29
local x = 20


local currentPlayer = playerModule.create()  -- Create a player instance
local ai = playerModule.create() -- create an ai opponent

function init(self)
	player_turn(self)
	-- draw the back of players deck to show the deck TODO
end



function player_turn(self)
	print("-------------------- ROUND " .. tostring(rounds))
	print("-- player's turn begins")
	
	-- player draws card from their deck into their hand
	local drawnCard = playerModule.drawCard(currentPlayer)

	if drawnCard then
		print("-- Drawing card from player's deck: " .. drawnCard.name)
		local cardProperties = { name = hash(drawnCard.name) }

		-- Modify the x-coordinate for the player's hand display
		local p = go.get_position()
		p.x = x -- Set the desired x-coordinate
		p.y = y -- Set the desired y-coordinate
		factory.create("#factory", p, nil, cardProperties)
		-- Set the initial position
		go.set_position(p)
		x = x + 10

	else
		print("-- No cards left in the player's deck.")
	end

	-- Print the player's hand
	local hand = "-- Player's hand:"
	for _, card in ipairs(currentPlayer.hand) do
		hand = hand .. " " .. card.name
	end
	print(hand)
end


function ai_turn(self)
	print("--------------------")
	print("-- ai's turn begins")
	local drawnCard = playerModule.drawCard(ai)

	if drawnCard then
		print("-- Drawing card from ai's deck: " .. drawnCard.name)
	else
		print("-- No cards left in the ai's deck.")
	end
	-- Print the player's hand
	local hand = "-- ai's hand:"
	for _, card in ipairs(ai.hand) do
		hand = hand .. " " .. card.name
	end
	print(hand)

	
	rounds = rounds + 1
	print("-- ai's turn ends")
	print("")
	player_turn(self)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("end_turn_message") then
		-- Handle the message indicating the turn has ended
		print("-- Player's turn has ended.")
		-- Add your logic here to respond to the end of the turn
		ai_turn(self)
	end
end
